{"version":3,"file":"author-datalist.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorDatalistElement extends AuthorMenuElement {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineAttributes({\n      'case-sensitive': false\n    })\n\n    this.UTIL.definePrivateMethods({\n      hideAllOptions: () => Array.from(this.options).forEach(option => option.setAttribute('hidden', '')),\n\n      inputFocusHandler: evt => {\n        this.inputElement.addEventListener('keydown', this.PRIVATE.inputKeydownHandler)\n      },\n\n      clearFilter: () => {\n        if (this.optionsElement.hasFilter('query')) {\n          this.optionsElement.removeFilter('query')\n          this.selectedIndex = -1\n        }\n      },\n\n      filterInput: () => {\n        this.PRIVATE.clearFilter()\n\n        let query = this.inputElement.value\n\n        if (!query || query === '') {\n          this.PRIVATE.showAllOptions()\n          return this.PRIVATE.clearFilter()\n        }\n\n        this.optionsElement.addFilter('query', () => {\n          let results = this.optionsElement.find(query, this['case-sensitive'])\n\n          if (results.length) {\n            return results\n          }\n\n          return this.options\n        })\n\n        this.PRIVATE.hideAllOptions()\n        this.optionsElement.filteredOptions.forEach(option => option.hidden = false)\n      },\n\n      inputKeydownHandler: evt => {\n        switch (evt[this.keySource]) {\n          case 13:\n          case 'Enter':\n          case 27:\n          case 'Escape':\n          case 38:\n          case 'ArrowUp':\n          case 40:\n          case 'ArrowDown': break\n\n          case 32:\n          case ' ': return\n\n          case 8:\n          case 'Backspace':\n            if (this.inputElement.value.length === 1) {\n              this.open = false\n            }\n\n            break\n        }\n\n        this.PRIVATE.keydownHandler(evt)\n      },\n\n      showAllOptions: () => Array.from(this.options).forEach(option => option.removeAttribute('hidden'))\n    })\n\n    this.UTIL.registerListeners(this, {\n      connected: () => {\n        this.UTIL.registerListeners(this.inputElement, {\n          focus: this.PRIVATE.inputFocusHandler,\n\n          blur: evt => {\n            this.inputElement.removeEventListener('keydown', this.PRIVATE.inputKeydownHandler)\n          },\n\n          click: evt => this.open = true,\n\n          input: this.PRIVATE.filterInput\n        })\n      },\n\n      'options.selected': evt => {\n        this.inputElement.value = evt.detail.options[0].value\n        this.PRIVATE.filterInput()\n      }\n    })\n  }\n\n  static get observedAttributes () {\n    return [...AuthorMenuElement.observedAttributes, 'case-sensitive']\n  }\n\n  get value () {\n    return this.inputElement.value\n  }\n\n  add (option, index) {\n    this.optionsElement.addOption(option, index)\n    // if (!customElements.get('author-option')) {\n    //   return console.error(`author-datalist requires author-option. Please include it in this document's <head> element.`)\n    // }\n    //\n    // if (!option.hasOwnProperty('id')) {\n    //   option.id = this.PRIVATE.generateGuid('option')\n    // }\n    //\n    // if (!option.hasOwnProperty('sourceElement') || !(option.sourceElement instanceof HTMLElement)) {\n    //   let sourceEl = document.createElement('option')\n    //\n    //   if (option.hasOwnProperty('innerHTML')) {\n    //     sourceEl.innerHTML = option.innerHTML\n    //   }\n    //\n    //   if (option.hasOwnProperty('label')) {\n    //     sourceEl.innerHTML = option.label\n    //   }\n    //\n    //   if (option.hasOwnProperty('value')) {\n    //     sourceEl.value = option.value\n    //   }\n    //\n    //   if (option.hasOwnProperty('disabled')) {\n    //     sourceEl.disabled = typeof option.disabled === 'boolean' && option.disabled\n    //   }\n    //\n    //   option.sourceElement = sourceEl\n    // }\n    //\n    // let label = option.sourceElement.getAttribute('label') || option.sourceElement.textContent.trim()\n    // let value = option.sourceElement.getAttribute('value')\n    // let disabled = option.sourceElement.disabled\n    // let authorOption = document.createElement('author-option')\n    //\n    // authorOption.style.display = 'none'\n    // authorOption.key = option.id\n    // authorOption.innerHTML = option.sourceElement.innerHTML\n    //\n    // dest.appendChild(authorOption)\n    // authorOption.addEventListener('click', evt => this.select(authorOption.key))\n    //\n    // option = {\n    //   attributes: { disabled, label, value },\n    //   id: option.id,\n    //   displayElement: authorOption,\n    //   sourceElement: option.sourceElement\n    // }\n    //\n    // if (index) {\n    //   this[`${index}`] = option.sourceElement\n    //   this.options.splice(index, 0, option)\n    //   return\n    // }\n    //\n    // this[`${this.options.length}`] = option.sourceElement\n    // this.options.push(option)\n  }\n\n  inject (input, select, guid) {\n    // Prevent re-injections\n    if (this.PRIVATE.injected) {\n      return\n    }\n\n    input.slot = 'input'\n    input.id = guid\n\n    this.UTIL.defineProperty('inputElement', {\n      readonly: true,\n      default: input\n    })\n\n    this.appendChild(this.inputElement)\n    super.inject(select)\n  }\n}\n\ncustomElements.define('author-datalist', AuthorDatalistElement)\n\nexport default AuthorDatalistElement\n"],"names":["AuthorDatalistElement","AuthorMenuElement","[object Object]","super","this","UTIL","defineAttributes","case-sensitive","definePrivateMethods","hideAllOptions","Array","from","options","forEach","option","setAttribute","inputFocusHandler","evt","inputElement","addEventListener","PRIVATE","inputKeydownHandler","clearFilter","optionsElement","hasFilter","removeFilter","selectedIndex","filterInput","query","value","showAllOptions","addFilter","results","find","length","filteredOptions","hidden","keySource","open","keydownHandler","removeAttribute","registerListeners","connected","focus","blur","removeEventListener","click","input","options.selected","detail","observedAttributes","index","addOption","select","guid","injected","slot","id","defineProperty","readonly","default","appendChild","inject","customElements","define"],"mappings":"qvBAAA,MAAMA,UAA8BC,kBAClCC,cACEC,MAAM,w2BAENC,KAAKC,KAAKC,iBAAiB,CACzBC,kBAAkB,IAGpBH,KAAKC,KAAKG,qBAAqB,CAC7BC,eAAgB,IAAMC,MAAMC,KAAKP,KAAKQ,SAASC,QAAQC,GAAUA,EAAOC,aAAa,SAAU,KAE/FC,kBAAmBC,IACjBb,KAAKc,aAAaC,iBAAiB,UAAWf,KAAKgB,QAAQC,sBAG7DC,YAAa,KACPlB,KAAKmB,eAAeC,UAAU,WAChCpB,KAAKmB,eAAeE,aAAa,SACjCrB,KAAKsB,eAAiB,IAI1BC,YAAa,KACXvB,KAAKgB,QAAQE,cAEb,IAAIM,EAAQxB,KAAKc,aAAaW,MAE9B,IAAKD,GAAmB,KAAVA,EAEZ,OADAxB,KAAKgB,QAAQU,iBACN1B,KAAKgB,QAAQE,cAGtBlB,KAAKmB,eAAeQ,UAAU,QAAS,KACrC,IAAIC,EAAU5B,KAAKmB,eAAeU,KAAKL,EAAOxB,KAAK,mBAEnD,OAAI4B,EAAQE,OACHF,EAGF5B,KAAKQ,UAGdR,KAAKgB,QAAQX,iBACbL,KAAKmB,eAAeY,gBAAgBtB,QAAQC,GAAUA,EAAOsB,QAAS,IAGxEf,oBAAqBJ,IACnB,OAAQA,EAAIb,KAAKiC,YACf,KAAK,GACL,IAAK,QACL,KAAK,GACL,IAAK,SACL,KAAK,GACL,IAAK,UACL,KAAK,GACL,IAAK,YAAa,MAElB,KAAK,GACL,IAAK,IAAK,OAEV,KAAK,EACL,IAAK,YACoC,IAAnCjC,KAAKc,aAAaW,MAAMK,SAC1B9B,KAAKkC,MAAO,GAMlBlC,KAAKgB,QAAQmB,eAAetB,IAG9Ba,eAAgB,IAAMpB,MAAMC,KAAKP,KAAKQ,SAASC,QAAQC,GAAUA,EAAO0B,gBAAgB,aAG1FpC,KAAKC,KAAKoC,kBAAkBrC,KAAM,CAChCsC,UAAW,KACTtC,KAAKC,KAAKoC,kBAAkBrC,KAAKc,aAAc,CAC7CyB,MAAOvC,KAAKgB,QAAQJ,kBAEpB4B,KAAM3B,IACJb,KAAKc,aAAa2B,oBAAoB,UAAWzC,KAAKgB,QAAQC,sBAGhEyB,MAAO7B,GAAOb,KAAKkC,MAAO,EAE1BS,MAAO3C,KAAKgB,QAAQO,eAIxBqB,mBAAoB/B,IAClBb,KAAKc,aAAaW,MAAQZ,EAAIgC,OAAOrC,QAAQ,GAAGiB,MAChDzB,KAAKgB,QAAQO,iBAKnBuB,gCACE,MAAO,IAAIjD,kBAAkBiD,mBAAoB,kBAGnDrB,YACE,OAAOzB,KAAKc,aAAaW,MAG3B3B,IAAKY,EAAQqC,GACX/C,KAAKmB,eAAe6B,UAAUtC,EAAQqC,GA4DxCjD,OAAQ6C,EAAOM,EAAQC,GAEjBlD,KAAKgB,QAAQmC,WAIjBR,EAAMS,KAAO,QACbT,EAAMU,GAAKH,EAEXlD,KAAKC,KAAKqD,eAAe,eAAgB,CACvCC,UAAU,EACVC,QAASb,IAGX3C,KAAKyD,YAAYzD,KAAKc,cACtBf,MAAM2D,OAAOT,YAIjBU,eAAeC,OAAO,kBAAmBhE"}