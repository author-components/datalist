{"version":3,"file":"author-datalist.es5.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorDatalistElement extends AuthorMenuElement {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineProperties({\n      clickCount: {\n        private: true,\n        default: 0\n      }\n    })\n\n    this.UTIL.definePrivateMethods({\n      find: query => (Array.from(this.options).filter(option => {\n        let value = this.hasAttribute('case-sensitive') ? option.value : option.value.toLowerCase()\n        let text = this.hasAttribute('case-sensitive') ? option.text : option.text.toLowerCase()\n        query = this.hasAttribute('case-sensitive') ? query : query.toLowerCase()\n\n        return value.indexOf(query) >= 0 || text.indexOf(query) >= 0\n      })),\n\n      hideAllOptions: () => Array.from(this.options).forEach(option => option.setAttribute('hidden', '')),\n\n      inputFocusHandler: evt => {\n        this.inputElement.addEventListener('keydown', this.PRIVATE.inputKeydownHandler)\n      },\n\n      inputKeydownHandler: evt => {\n        if (!this.open) {\n          this.PRIVATE.showAllOptions()\n          this.open = true\n          return\n        }\n\n        this.PRIVATE.keydownHandler(evt)\n      },\n\n      showAllOptions: () => Array.from(this.options).forEach(option => option.removeAttribute('hidden'))\n    })\n\n    this.UTIL.registerListeners(this, {\n      connected: () => {\n        this.inputElement.addEventListener('focus', this.PRIVATE.inputFocusHandler)\n\n        this.UTIL.registerListeners(this.inputElement, {\n          blur: evt => {\n            this.PRIVATE.clickCount = 0\n            this.inputElement.removeEventListener('keydown', this.PRIVATE.inputKeydownHandler)\n          },\n\n          click: evt => {\n            this.PRIVATE.clickCount++\n\n            if (this.PRIVATE.clickCount === 2) {\n              this.PRIVATE.showAllOptions()\n              this.open = true\n            }\n          },\n\n          input: evt => {\n            this.PRIVATE.hideAllOptions()\n            let query = this.inputElement.value\n\n            if (!query) {\n              return\n            }\n\n            let results = this.PRIVATE.find(query)\n\n            if (results.length) {\n              results.forEach(result => result.removeAttribute('hidden'))\n              this.open = true\n              return\n            }\n\n            if (this.open) {\n              this.open = false\n            }\n\n            this.PRIVATE.hideAllOptions()\n          }\n        })\n      },\n\n      disconnected: () => {\n        this.inputElement.removeEventListener('focus', this.PRIVATE.inputFocusHandler)\n      },\n\n      'options.selected': evt => this.inputElement.value = evt.detail.options[0].value\n    })\n  }\n\n  static get observedAttributes () {\n    return [...AuthorMenuElement.observedAttributes, 'case-sensitive']\n  }\n\n  get value () {\n    return this.inputElement.value\n  }\n\n  add (option, index) {\n    this.optionsElement.addOption(option, index)\n    // if (!customElements.get('author-option')) {\n    //   return console.error(`author-datalist requires author-option. Please include it in this document's <head> element.`)\n    // }\n    //\n    // if (!option.hasOwnProperty('id')) {\n    //   option.id = this.PRIVATE.generateGuid('option')\n    // }\n    //\n    // if (!option.hasOwnProperty('sourceElement') || !(option.sourceElement instanceof HTMLElement)) {\n    //   let sourceEl = document.createElement('option')\n    //\n    //   if (option.hasOwnProperty('innerHTML')) {\n    //     sourceEl.innerHTML = option.innerHTML\n    //   }\n    //\n    //   if (option.hasOwnProperty('label')) {\n    //     sourceEl.innerHTML = option.label\n    //   }\n    //\n    //   if (option.hasOwnProperty('value')) {\n    //     sourceEl.value = option.value\n    //   }\n    //\n    //   if (option.hasOwnProperty('disabled')) {\n    //     sourceEl.disabled = typeof option.disabled === 'boolean' && option.disabled\n    //   }\n    //\n    //   option.sourceElement = sourceEl\n    // }\n    //\n    // let label = option.sourceElement.getAttribute('label') || option.sourceElement.textContent.trim()\n    // let value = option.sourceElement.getAttribute('value')\n    // let disabled = option.sourceElement.disabled\n    // let authorOption = document.createElement('author-option')\n    //\n    // authorOption.style.display = 'none'\n    // authorOption.key = option.id\n    // authorOption.innerHTML = option.sourceElement.innerHTML\n    //\n    // dest.appendChild(authorOption)\n    // authorOption.addEventListener('click', evt => this.select(authorOption.key))\n    //\n    // option = {\n    //   attributes: { disabled, label, value },\n    //   id: option.id,\n    //   displayElement: authorOption,\n    //   sourceElement: option.sourceElement\n    // }\n    //\n    // if (index) {\n    //   this[`${index}`] = option.sourceElement\n    //   this.options.splice(index, 0, option)\n    //   return\n    // }\n    //\n    // this[`${this.options.length}`] = option.sourceElement\n    // this.options.push(option)\n  }\n\n  inject (input, datalist, guid) {\n    // Prevent re-injections\n    if (this.PRIVATE.injected) {\n      return\n    }\n\n    input.slot = 'input'\n    input.id = guid\n\n    this.UTIL.defineProperty('inputElement', {\n      readonly: true,\n      default: input\n    })\n\n    this.appendChild(this.inputElement)\n    super.inject(datalist)\n  }\n}\n\ncustomElements.define('author-datalist', AuthorDatalistElement)\n\nexport default AuthorDatalistElement\n"],"names":["AuthorDatalistElement","UTIL","defineProperties","clickCount","private","default","definePrivateMethods","find","query","Array","from","_this","options","filter","option","value","hasAttribute","toLowerCase","text","indexOf","hideAllOptions","forEach","setAttribute","inputFocusHandler","evt","inputElement","addEventListener","PRIVATE","inputKeydownHandler","open","showAllOptions","keydownHandler","removeAttribute","registerListeners","connected","blur","removeEventListener","click","input","results","length","result","disconnected","detail","AuthorMenuElement","observedAttributes","index","optionsElement","addOption","datalist","guid","this","injected","slot","id","defineProperty","readonly","appendChild","customElements","define"],"mappings":"s8DAAMA,ykCAIGC,KAAKC,iBAAiB,CACzBC,WAAY,CACVC,SAAS,EACTC,QAAS,OAIRJ,KAAKK,qBAAqB,CAC7BC,KAAM,SAAAC,UAAUC,MAAMC,KAAKC,EAAKC,SAASC,OAAO,SAAAC,OAC1CC,EAAQJ,EAAKK,aAAa,kBAAoBF,EAAOC,MAAQD,EAAOC,MAAME,cAC1EC,EAAOP,EAAKK,aAAa,kBAAoBF,EAAOI,KAAOJ,EAAOI,KAAKD,qBAC3ET,EAAQG,EAAKK,aAAa,kBAAoBR,EAAQA,EAAMS,cAE7B,GAAxBF,EAAMI,QAAQX,IAAsC,GAAvBU,EAAKC,QAAQX,MAGnDY,eAAgB,kBAAMX,MAAMC,KAAKC,EAAKC,SAASS,QAAQ,SAAAP,UAAUA,EAAOQ,aAAa,SAAU,OAE/FC,kBAAmB,SAAAC,KACZC,aAAaC,iBAAiB,UAAWf,EAAKgB,QAAQC,sBAG7DA,oBAAqB,SAAAJ,OACdb,EAAKkB,cACHF,QAAQG,wBACRD,MAAO,KAITF,QAAQI,eAAeP,IAG9BM,eAAgB,kBAAMrB,MAAMC,KAAKC,EAAKC,SAASS,QAAQ,SAAAP,UAAUA,EAAOkB,gBAAgB,iBAGrF/B,KAAKgC,uBAAwB,CAChCC,UAAW,aACJT,aAAaC,iBAAiB,QAASf,EAAKgB,QAAQJ,qBAEpDtB,KAAKgC,kBAAkBtB,EAAKc,aAAc,CAC7CU,KAAM,SAAAX,KACCG,QAAQxB,WAAa,IACrBsB,aAAaW,oBAAoB,UAAWzB,EAAKgB,QAAQC,sBAGhES,MAAO,SAAAb,KACAG,QAAQxB,aAEmB,IAA5BQ,EAAKgB,QAAQxB,eACVwB,QAAQG,mBACRD,MAAO,IAIhBS,MAAO,SAAAd,KACAG,QAAQP,qBACTZ,EAAQG,EAAKc,aAAaV,SAEzBP,OAID+B,EAAU5B,EAAKgB,QAAQpB,KAAKC,MAE5B+B,EAAQC,cACVD,EAAQlB,QAAQ,SAAAoB,UAAUA,EAAOT,gBAAgB,mBAC5CH,MAAO,GAIVlB,EAAKkB,SACFA,MAAO,KAGTF,QAAQP,sBAKnBsB,aAAc,aACPjB,aAAaW,oBAAoB,QAASzB,EAAKgB,QAAQJ,uCAG1C,SAAAC,UAAOb,EAAKc,aAAaV,MAAQS,EAAImB,OAAO/B,QAAQ,GAAGG,iQAvF7C6B,qFA4FrBA,kBAAkBC,qBAAoB,oDAO9C/B,EAAQgC,QACNC,eAAeC,UAAUlC,EAAQgC,kCA4DhCR,EAAOW,EAAUC,GAEnBC,KAAKxB,QAAQyB,WAIjBd,EAAMe,KAAO,QACbf,EAAMgB,GAAKJ,OAENjD,KAAKsD,eAAe,eAAgB,CACvCC,UAAU,EACVnD,QAASiC,SAGNmB,YAAYN,KAAK1B,wDACTwB,yCA/ENE,KAAK1B,aAAaV,kDAmF7B2C,eAAeC,OAAO,kBAAmB3D"}